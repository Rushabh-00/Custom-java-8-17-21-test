name: Build OpenJDK Multiarch

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-jdk:
    runs-on: ubuntu-latest
    env:
      JAVA_8_VERSION: 8u362
      JAVA_17_VERSION: 17.0.9
      JAVA_21_VERSION: 21
      WORKDIR: ${{ github.workspace }}/jdk-src
      OUTPUT: ${{ github.workspace }}/jre-output

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf libx11-dev libxext-dev \
                                  libxrender-dev libxtst-dev wget unzip python3 curl \
                                  pkg-config unzip xz-utils git

      - name: Download Android NDK for cross-compilation
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          unzip android-ndk-r25b-linux.zip
          export ANDROID_NDK=$PWD/android-ndk-r25b
          echo "ANDROID_NDK=$ANDROID_NDK" >> $GITHUB_ENV

      ##########################
      # Java 8 ARM Builds
      ##########################
      - name: Build Java 8 ARM32
        run: |
          cd $WORKDIR/jdk8
          # configure cross-compilation
          export CC=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang
          export CXX=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang++
          bash configure --openjdk-target=arm-linux-android --disable-warnings-as-errors
          make images
          # Repack server-only
          bash ../../repackjre8-server-only.sh $WORKDIR $OUTPUT

      - name: Build Java 8 ARM64
        run: |
          cd $WORKDIR/jdk8
          export CC=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang
          export CXX=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++
          bash configure --openjdk-target=aarch64-linux-android --disable-warnings-as-errors
          make images
          bash ../../repackjre8-server-only.sh $WORKDIR $OUTPUT

      ##########################
      # Java 17+ ARM Builds
      ##########################
      - name: Prepare config.sub/config.guess for Java 17/21
        run: |
          for ver in 17 21; do
            cd $WORKDIR/jdk$ver
            wget -O config.sub https://git.savannah.gnu.org/cgit/config.git/plain/config.sub
            wget -O config.guess https://git.savannah.gnu.org/cgit/config.git/plain/config.guess
            mkdir -p make/autoconf/build-aux
            cp config.sub make/autoconf/build-aux/
            cp config.guess make/autoconf/build-aux/
          done

      - name: Build Java 17 ARM64
        run: |
          cd $WORKDIR/jdk17
          export CC=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang
          export CXX=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++
          bash configure --openjdk-target=aarch64-linux-android --with-boot-jdk=$JAVA_HOME --disable-warnings-as-errors
          make images
          bash ../../repackjre17plus-server-only.sh $WORKDIR $OUTPUT

      - name: Build Java 21 ARM64
        run: |
          cd $WORKDIR/jdk21
          export CC=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang
          export CXX=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++
          bash configure --openjdk-target=aarch64-linux-android --with-boot-jdk=$JAVA_HOME --disable-warnings-as-errors
          make images
          bash ../../repackjre17plus-server-only.sh $WORKDIR $OUTPUT

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jre-server-only
          path: $OUTPUT
